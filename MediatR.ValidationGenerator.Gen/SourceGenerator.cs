using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using MediatR.ValidationGenerator.Gen.Extensions;
using System.Diagnostics;
using System.Linq;
using MediatR.ValidationGenerator.Gen.RoslynUtils;
using System.Text;

namespace MediatR.ValidationGenerator.Gen
{
    [Generator]
    public class SourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new TypeSyntaxReceiver());
        }

        private DiagnosticDescriptor _failedToCreateValidatorDescritor = new DiagnosticDescriptor("VG0001",
            "Failed to create validator",
            "Failed to create validator for '{0}' request with message '{1}'",
            "Errors",
            DiagnosticSeverity.Error,
            true);

        public void Execute(GeneratorExecutionContext context)
        {
            var receiver = context.SyntaxReceiver as TypeSyntaxReceiver;
            var classContext = receiver.Types;
            var requestClasses = ClassSorter.SortClassesThatImplement(classContext, "IRequest");
            var validationModels = ValidationModelCreator.GetValidationModels(classContext, requestClasses);
            List<Diagnostic> errors = new List<Diagnostic>();
            foreach (var validationModel in validationModels)
            {
                var creationResult = RequestValidatorCreator.CreateValidatorFor(validationModel);
                if (creationResult.HasValue)
                {
                    string source = PrefixAsAutogenerated(creationResult.Value);
                    context.AddSource(validationModel.ValidatorName, source);
                }
                else
                {
                    var request = validationModel.RequestClass;
                    var requestSymbol = context.Compilation.GetSemanticModel(request.SyntaxTree).GetDeclaredSymbol(request);
                    var error = Diagnostic.Create(_failedToCreateValidatorDescritor, requestSymbol.Locations.FirstOrDefault(), request.Identifier.Text, creationResult.NullMessage);
                    errors.Add(error);
                }
            }
        }

        private string PrefixAsAutogenerated(string source)
        {
            StringBuilder sourceBuilder = new StringBuilder();
            sourceBuilder.AppendLine("// <auto-generated/>");
            sourceBuilder.AppendLine();
            sourceBuilder.Append(source);
            return sourceBuilder.ToString();
        }
    }
}
