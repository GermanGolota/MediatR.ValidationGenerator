using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MediatR.ValidationGenerator.Models;
using MediatR.ValidationGenerator.RoslynUtils;

namespace MediatR.ValidationGenerator
{
    [Generator]
    public class SourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new TypeSyntaxReceiver());
            context.RegisterForPostInitialization(context =>
            {
                context.AddSource("Validator.cs", StaticSourceCodes.Validator);
                context.AddSource("ValidationBehavior.cs", StaticSourceCodes.Behavior);
                context.AddSource("DIExtensions.cs", StaticSourceCodes.DIExtensions);
            });
        }

        public void Execute(GeneratorExecutionContext context)
        {
           /* var receiver = context.SyntaxReceiver as TypeSyntaxReceiver;
            var classContext = receiver.Types;
            var requestClasses = ClassSorter.SortClassesThatImplement(classContext, "IRequest");
            var validationModels = ValidationModelCreator.GetValidationModels(classContext, requestClasses);
            List<Diagnostic> errors = new List<Diagnostic>();
            foreach (var validationModel in validationModels)
            {
                var creationResult = RequestValidatorCreator.CreateValidatorFor(validationModel);
                if (creationResult.HasValue)
                {
                    string source = PrefixAsAutogenerated(creationResult.Value);
                    context.AddSource(validationModel.ValidatorName, source);
                }
                else
                {
                    Diagnostic error = CreateDiagnostic(context, validationModel, creationResult);
                    errors.Add(error);
                }
            }*/
        }

        private Diagnostic CreateDiagnostic(GeneratorExecutionContext context, RequestValidationModel validationModel, ValueOrNull<string> creationResult)
        {
            var request = validationModel.RequestClass;
            var location = request.Locations.FirstOrDefault();
            var error = Diagnostic.Create(DiagnosticDescriptors.FailedToCreateValidatorDescriptor, location, request.MetadataName, creationResult.NullMessage);
            return error;
        }

        private string PrefixAsAutogenerated(string source)
        {
            StringBuilder sourceBuilder = new StringBuilder();
            sourceBuilder.AppendLine("// <auto-generated/>");
            sourceBuilder.AppendLine();
            sourceBuilder.Append(source);
            return sourceBuilder.ToString();
        }
    }
}
